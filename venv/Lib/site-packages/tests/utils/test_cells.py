import pytest

from alive_progress.utils.cells import to_cells


@pytest.mark.parametrize('text, expected', [
    ('', ''),
    (None, ''),
    ('a text', 'a text'),
    ('\n', ' '),
    (' \n ', '   '),
    ('\n \n', '   '),
    ('\r', ' '),
    (' \r ', '   '),
    ('\r \n', '   '),
    ('asd\n', 'asd '),
    ('\nasd', ' asd'),
    ('asd1\nasd2', 'asd1 asd2'),
    ('asd1 \nasd2', 'asd1  asd2'),
    ('asd1 \r\nasd2', 'asd1   asd2'),
    ('\nasd1\n \r \nasd2\r', ' asd1     asd2 '),
])
def test_sanitize_text_normal_chars(text, expected, show_marks):
    result = to_cells(text)
    assert show_marks(result) == expected


@pytest.mark.parametrize('text, expected', [
    ('ğŸ˜º', 'ğŸ˜ºX'),
    ('\nğŸ˜º', ' ğŸ˜ºX'),
    ('ğŸ˜º \n ğŸ˜º', 'ğŸ˜ºX   ğŸ˜ºX'),
    ('\n ğŸ˜º\nğŸ˜º', '  ğŸ˜ºX ğŸ˜ºX'),
    ('asdğŸ˜º\n', 'asdğŸ˜ºX '),
    ('ğŸ˜º\nasd', 'ğŸ˜ºX asd'),
    ('asd1\rasd2ğŸ˜º', 'asd1 asd2ğŸ˜ºX'),
    ('\nasd1ğŸ˜º\nğŸ˜º\n\rasd2\r', ' asd1ğŸ˜ºX ğŸ˜ºX  asd2 '),
])
def test_sanitize_text_wide_chars(text, expected, show_marks):
    result = to_cells(text)
    assert show_marks(result) == expected


@pytest.mark.parametrize('text, expected', [
    ('ok', 'ok'),
    ('ğŸ˜º', 'ğŸ˜ºX'),
    ('ğŸ˜ºğŸ˜º', 'ğŸ˜ºXğŸ˜ºX'),
    ('ğŸ˜ºokğŸ˜º', 'ğŸ˜ºXokğŸ˜ºX'),
])
def test_sanitize_text_double(text, expected, show_marks):
    result = to_cells(text)
    assert show_marks(result) == expected
